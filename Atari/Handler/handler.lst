mads 1.9.9
Source: C:\Users\steve\Documents\GitHub\atari_pbi\Atari\Handler\handler.asm
     1 				; PBI R:Fi PBI ROM Handler
     2 				; 2017APR12 Steve Richardson (TangentAudio)
     3 				;-------------------------------------------------------------------------	
     4
     5
     6
     7 				;-------------------------------------------------------------------------	
     8 				; tell MADS to get rid of header bytes
     9 						opt h-f+
    10
    11
    12 				;-------------------------------------------------------------------------	
    13 = E486			NEWDEV = $E486
    14 = E48F			GENDEV = $E48F
    15
    16 = 0247			DEVMASK = $0247 ; PBI devices known to OS
    17 = 0248			NDEVREQ = $0248 ; activated PBI device
    18
    19 = 031A			HATABS = $031A
    20
    21 = 0020			IOCBCHIDZ = $20
    22
    23 = D100			DEVREG = $D100
    24
    25 = 0052			devname = 'R'
    26
    27
    28
    29 				;-------------------------------------------------------------------------	
    30 				; PBI table (D800-D81C)
    31 						org $D800
    32
    33 D800 00 00		pbi_table	.word $0000		; ROM checksum - ignored
    34 D802 00					.byte $00		; ROM revision - ignored
    35 D803 80					.byte $80		; Signature Byte ($80)
    36 D804 00					.byte $00		; device type
    37 D805 4C 1D D8				jmp io_vector		; I/O vector
    38 D808 4C 1F D8				jmp irq_vector		; IRQ vector
    39 D80B 91					.byte $91		; Signature Byte ($91)
    40 D80C 52					.byte devname		; device name (ASCII char)
    41 							
    42 						
    43 									; note: all HATABS entries below are -1
    44 D80D 37 D8				.word open_vector-1	; HATABS - open 
    45 D80F 3B D8				.word close_vector-1	; HATABS - close
    46 D811 3F D8				.word get_vector-1	; HATABS - get byte
    47 D813 43 D8				.word put_vector-1	; HATABS - put byte
    48 D815 4A D8				.word status_vector-1	; HATABS - status
    49 D817 4E D8				.word special_vector-1	; HATABS - special
    50 D819 4C 20 D8				jmp init_vector		; initialization vector
    51 D81C 00					.byte $00		; unused
    52
    53 				;-------------------------------------------------------------------------	
    54
    55 				; not implementing now	
    56 D81D 18			io_vector	clc			
    57 D81E 60					rts
    58
    59 				; no IRQ handling yet
    60 D81F			irq_vector	
    61 D81F 60					rts
    62
    63 				;-------------------------------------------------------------------------	
    64 				; device is registered to OS by setting the appropriate bit in DEVMASK
    65 				; and the CIO handler is registered in the HATABS table by calling the NEWDEV routine
    66 D820 AD 47 02		init_vector	lda DEVMASK		; get known PBI devices
    67 D823 0D 48 02				ora NDEVREQ		; OR in the current device request bit
    68 D826 8D 47 02				sta DEVMASK		; store the devices back 
    69
    70 				; Earl Rice method (ANTIC JAN-APR 1985) - seems to populate HATABS properly
    71 				;		ldx #0
    72 				;search
    73 				;		lda HATABS, x
    74 				;		beq found	; found a spot (=0)
    75 				;		inx
    76 				;		inx
    77 				;		inx
    78 				;		cpx #36		; length of HATABS
    79 				;		bcc search
    80 				;		rts		; no room in HATABS
    81 				;found
    82 				;		lda #devname
    83 				;		sta HATABS, x
    84 				;		inx
    85 				;		
    86 				;		lda #<GENDEV
    87 				;		sta HATABS, x
    88 				;		inx
    89 				;		lda #>GENDEV
    90 				;		sta HATABS, x
    91
    92 						;; roland scholz/fjc method using the NEWDEV routine in the OS
    93 D829 A2 52				ldx #devname
    94 D82B A9 E4				lda #.HI(GENDEV)
    95 D82D A0 8F				ldy #.LO(GENDEV)
    96 D82F 20 86 E4				jsr NEWDEV		; returns: N = 1 - failed, C = 0 - success, C =1 - entry already exists
    97 						
    98 						; TODO: something useful with result codes
    99 					
   100
   101 						; TODO: device-specific init
   102
   103 D832 A9 01				lda #01			; turn on an LED to indicate PBI init was a success
   104 D834 8D 00 D1				sta DEVREG
   105
   106 					
   107 D837 60					rts
   108
   109 				;-------------------------------------------------------------------------	
   110 D838			open_vector			
   111 						; per Roland Scholz:
   112 						; GENDEV then activates all registered PBI devices one by one and jumps to the open routine through
   113 						; the open vector contained in the data structure. The open routine should then check if it supports
   114 						; the given handler name (Z:) by checking the content of address IOCBCHIDZ
   115 						; Several PBI devices can share the GENDEV driver as long as each firmware checks whether it is the one the OS wants to call
   116
   117 						; FlashJazzcat found first byte of ICBALZ/ICBALH ($24/$25) to contain the device name, not IOCBCHIDZ which is an index...?
   118 						; Still working with him to attain U1MB coexistence... 
   119
   120 						; Suffice it to say we're not doing any of this yet!
   121 D838 A0 01				ldy #1
   122 D83A 38					sec
   123 D83B 60					rts
   124
   125 D83C			close_vector	
   126 D83C A0 01				ldy #1
   127 D83E 38					sec
   128 D83F 60					rts
   129
   130 D840			get_vector	
   131 D840 A0 01				ldy #1
   132 D842 38					sec
   133 D843 60					rts
   134
   135 D844			put_vector	
   136 						; this is about as simple as it gets - output the byte to the test LEDs
   137 						; this is confirmed to work with a simple BASIC program that OPENs R: and PUTs bytes - but only if U1MB PBI disabled
   138 						; (see above)
   139 D844 8D 00 D1				sta DEVREG
   140
   141 D847 A0 01				ldy #1
   142 D849 38					sec
   143 D84A 60					rts
   144
   145 D84B			status_vector
   146 D84B A0 01				ldy #1
   147 D84D 38					sec
   148 D84E 60					rts
   149
   150 D84F			special_vector
   151 D84F A0 01				ldy #1
   152 D851 38					sec
   153 D852 60					rts
   154
   155 				;-------------------------------------------------------------------------	
   156 D853					.local banner
   157 D853 54 61 6E 67 65 6E + 		.byte 'TangentAudio R:Fi PBI Handler 2017 Steve Richardson'
   158 						.endl
   159 						
